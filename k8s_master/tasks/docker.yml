---

- name: "Ensure old Versions of Docker are not Installed"
  package:
          name:
                  - docker
                  - docker-engine
          state: absent

- name: "Repository for Docker for [RedHat Family]"
  yum_repository:
          name: "docker"
          description: "Docker Repo"
          baseurl: "https://download.docker.com/linux/centos/7/x86_64/stable"
          gpgcheck: no
  when: ansible_facts['os_family'] == "RedHat" and ansible_facts['distribution'] != "Amazon"

- name: "Ensure dependencies are installed in [Debian Family]"
  apt:
          name:
                  - apt-transport-https
                  - ca-certificates
                  - curl
                  - software-properties-common
          state: present
  when: ansible_facts['os_family'] == "Debian"


- name: "Adding the GPG key for the official Docker Repository for [Debian Family]"
  apt_key:
          url: "{{ docker_apt_gpg_key }}"
          state: present        
  when: ansible_facts['os_family'] == "Debian"

- name: "Add specified repository into sources list using specified filename for [Debian Family]"
  apt_repository:
          repo: "{{ docker_apt_repository }}"
          state: present
          update_cache: true
          filename: docker
  when: ansible_facts['os_family'] == "Debian"

- name: "Installing containerd.io in [RedHat Family]"
  package:
          name: "https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.4.3-3.1.el7.x86_64.rpm"
          state: present
          disable_gpg_check: True
  when: ansible_facts['os_family'] == "RedHat" and ansible_facts['distribution'] != "Amazon"

- name: "Installing docker"
  package:
          name: "docker-ce"
          state: present
  when: ansible_facts['distribution'] != "Amazon"

- name: "Installing docker in Amazon Linux"
  package:
          name: "docker"
          state: present
  when: ansible_facts['distribution'] == "Amazon"

- name: "Starting Docker Service"
  service:
          name:  "docker"
          state: started
          enabled: yes

- name: "Configure Docker Driver as systemd"
  template:
          dest: "/etc/docker/daemon.json"
          src: "daemon.json"
  register: docker_conf

- name: "Restarting Docker Sevice"
  service:
          name: "docker"
          state: restarted
          enabled: yes
  when: docker_conf['changed'] == True
